#*******************************************************************
# Longitude/Latitude to Quarter Degree Grid Cell standard conversion 
# utility. Daemon. 
#
# The daemon polls a directory for a.dbf-file. It then transfers and
# converts the relevant .dbf-file.
#
# Delivered as-is. If it works - fine for you. If it fails - too bad. 
# No guarantees are given  whatsoever. If you use this program for 
# illegal purposes - don't blame me.
# 
# License type is Gnu GPL. Copy, distribute and change freely. Keep
# the author in mind for crediting. Come to think of it, use this 
# reference:
#
# R. Larsen, T. Holmern, S. D. Prager, H. Maliti and E. Roskaft 
#     (2009) Using the extended quarter degree grid cell system 
#     to unify mapping and sharing of biodiversity data, African
#     Journal of Ecology. Volume 47, Issue 3 , Pages 382 - 392
#
# Author Ragnvald Larsen, Dept of Biology, NTNU (www.bio.ntnu.no)
# ragnvald(at)mindland.com
#
# Version 0.7 (13.12.2009)


import os
import shutil
import tempfile
import smtplib
import string
import time
import datetime
import math

from random   import choice
from dbfpy    import dbf





#This is where the program is executed

def qdgc(lon_value,lat_value,qdgc_level):

	lonlatvalues = get_lonlat(lon_value,lat_value)

	qdgcvalues = get_recursive_qdgc(lon_value,lat_value,qdgc_level,"")

	resultstring = lonlatvalues + qdgcvalues

	return resultstring




sender                = 'sendersemail@someplace.com'

path_to_watch         = '/var/www/www_qdgc_org/lonlat2qdgc/incoming/'

folder_destination    = '/var/www/www_qdgc_org/lonlat2qdgc/userdata/'

path_web              = 'http://www.qdgc.org/lonlat2qdgc/userdata/'

now                   = datetime.datetime.now()

lonlat2qdgcversion    = 'lonlat2qdgc version 0.7 did this conversion.'

formoreinformation    = 'More information about QDGC (Quarter Degree Grid Cells) is available here: http://www.qdgc.org '

errorflag             = 0


def genRandomstring(length=8, chars=string.letters + string.digits):
	return ''.join([choice(chars) for i in range(length)])




#Folder to watch
before = dict ([(f, None) for f in os.listdir (path_to_watch)])

while 1:

	time.sleep (15)

	the_logfile = ''

	currentfiles =dict ([(f, None) for f in os.listdir (path_to_watch)])

	for onefile in currentfiles:

		basename, extension = os.path.splitext(onefile)  

		# If one of the files in the list of files is a .dbf-file
		# then the party starts.
		if extension=='.sos': 


			time_for_job = now.strftime("%Y-%m-%d %H:%M")

			# Create a string which will later serve as a random folder name
			randomfolder = genRandomstring(20,string.letters)

			# Make the random folder. This is referred to as the user folder
			os.mkdir(folder_destination+randomfolder)

			# Create the user in folder
			os.mkdir(folder_destination+randomfolder+'/in')
			folder_in  = (folder_destination + randomfolder + '/in/')

			# Create the user out folder
			os.mkdir(folder_destination+'/'+randomfolder+'/out')
			folder_out = (folder_destination + randomfolder + '/out/')


			# Copy the original file to the in and out-folders
			shutil.copy (path_to_watch+ onefile, folder_in + onefile)
			shutil.move (path_to_watch+ onefile, folder_out + onefile)


			#move info-file generated by the script. Job information resides in this one.
			shutil.move (path_to_watch+ basename+'.info', folder_out + basename+'.info')

			#print  '\n'+ 'Data file (%s.dbf) has been moved.' % (basename)
			#print  '\n'+ 'Task file (%s.info) has been moved.' % (basename)


			#read input_file_name.info
			file_info = open(folder_out + basename+'.info', "r")

			# Handle user email
			the_logfile        = the_logfile + '- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n'
			the_logfile        = the_logfile + '-\n'
			user_email         = file_info.readline().rstrip('\n')
			the_logfile        = the_logfile + '- Brukers epost            : %s' % (user_email)
			the_logfile        = the_logfile + '\n'

			# Handle user comment
			user_comment       = file_info.readline().rstrip('\n')
			the_logfile        = the_logfile + '- Brukers kommentarer      : %s\n' % (user_comment)
			the_logfile        = the_logfile + '-\n'

			# Logfile document time            
			the_logfile        = the_logfile + '- Oppdraget ble registrert : %s.\n' % time_for_job
			the_logfile        = the_logfile + '-\n'
			the_logfile        = the_logfile + '- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n'

			#Close the info file
			file_info.close()


			# Convert file in folder out

			# Timer starts
			t1 = time.clock()            

			# set counter
			counter = 0

			# Run the sosi2kml.py script on the onefile-file
			# os.system(python sosi2kml.py -i -f %s') % (onefile)

			# Export the imported file
			# os.system(python sosi2kml.py -i -f %s') % (onefile)

			# Empty the database
			# os.system("python sosi2kml.py -r')

			if errorflag == 0:
				# Timer ends and then calculate the speed
				t2                       = time.clock()
				log_time                 = (t2-t1)
				log_posts                = (counter)
				if (log_time <1 ):
					log_conversionspersecond = 'many'
				else:
					log_conversionspersecond = int(log_posts/log_time)

				the_logfile = the_logfile +'\n'+  'Konverteringen ble gjort i løpet av %s sekunder.\n\n' % (log_time, log_conversionspersecond)

				# Prepare link address
				user_link_outputfile = path_web + randomfolder  + '/out/' +  onefile

				user_link_logfile = path_web + randomfolder  + '/out/' + basename + '.log'

				the_logfile = the_logfile +'\n'+'Lenken til den eksporterte filen er: %s\n' % user_link_outputfile
				the_logfile = the_logfile +'\n'+'Lenke til loggfilen er: %s' % user_link_logfile

			else:
				the_logfile = the_logfile +'\n'+'Noe gikk galt. Ta kontakt med miljødataseksjonen anående denne filen.'

			# Send email with status and link to user            
			subject ='Kovertering per %s' % time_for_job
			headers = "From: %s\r\nTo: %s\r\nSubject: %s\r\n\r\n" % (sender, [user_email], subject)
			message = headers+the_logfile

			server = smtplib.SMTP('smtp.somewhere.com')
			try:

				USER = 'youremail@test.com'
				PWD = 'yourpassword'
				server.ehlo()
				server.starttls()
				server.ehlo()
				server.login(USER,PWD)
				server.sendmail(USER, [user_email], message)
				server.close()
				print "Successfully sent email"
				server.quit      
			except:
				#damn!
				the_logfile = the_logfile +'\n'+'The SMTP sendmail failed.' 


			print the_logfile

			#Log user email, input file name and user comment in logfile
			#
			try:
				# This will create a new file or **overwrite an existing file**.
				f = open((folder_out + basename+'.log'), "w")
				try:
					f.write(the_logfile) # Write a string to a file

				finally:
					f.close()

			except IOError:
				pass



			the_logfile = ''            

	currentfile = ''

	counter = 0
